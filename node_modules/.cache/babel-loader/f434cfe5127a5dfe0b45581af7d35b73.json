{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js\";\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport \"./ProgressBar.style\";\nimport { LEFT, RIGHT } from \"./ProgressBar.config\";\nconst PROGRESS_POINT_WIDTH = 35; // px\n\nconst PROGRESS_POINT_MARGIN = 5; // px\n\n/** #namespace Component/ProgressBar/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProgressBar = Mosaic.middleware((_temp = _class = class ProgressBar_ extends Mosaic.Extensible(PureComponent) {\n  renderEdgeLine(side, filled = false) {\n    const {\n      progressList\n    } = this.props; // currentID === progressList.length - 1\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line ${side}EdgeLine`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderCheckpoint() {\n    const {\n      progressList\n    } = this.props; // currentID === progressList.length - 1\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line ${side}EdgeLine`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderProgressLine() {}\n\n  render() {\n    var _this = this;\n\n    const {\n      progressList,\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProgressBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, this.renderEdgeLine(LEFT), progressList.map(function () {\n      _this.renderCheckpoint();\n\n      _this.renderProgressLine();\n    }), this.renderEdgeLine(RIGHT)), /*#__PURE__*/_checkBEM(React, \"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  progressList: PropTypes.arrayOf(PropTypes.string),\n  currentID: PropTypes.number\n}, _temp), \"Component/ProgressBar/Component\");\nexport default ProgressBar;","map":{"version":3,"sources":["/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js"],"names":["PropTypes","PureComponent","LEFT","RIGHT","PROGRESS_POINT_WIDTH","PROGRESS_POINT_MARGIN","renderEdgeLine","side","filled","progressList","props","width","length","renderCheckpoint","renderProgressLine","render","currentID","map","propTypes","arrayOf","string","number","ProgressBar"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA;AAEA,SACIC,IADJ,EAEIC,KAFJ;AAKA,MAAMC,oBAAoB,GAAG,EAA7B,C,CAAiC;;AACjC,MAAMC,qBAAqB,GAAG,CAA9B,C,CAAiC;;AAEjC;;;;AACA,4GAAiCJ,aAAjC,EAA+C;AAM3CK,EAAAA,cAAc,CAACC,IAAD,EAAOC,MAAM,GAAC,KAAd,EAAqB;AAC/B,UAAM;AACFC,MAAAA;AADE,QAEF,KAAKC,KAFT,CAD+B,CAI/B;;AACA;AAEM,MAAA,KAAK,EAAG,QAAOH,IAAK,UAF1B;AAGM,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAG,QAAO,OAAOF,YAAY,CAACG,MAAb,GAAsB,CAA7B,CAAgC,OAAMR,oBAAqB;AAA5E,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMH;;AAEDS,EAAAA,gBAAgB,GAAG;AACf,UAAM;AACFJ,MAAAA;AADE,QAEF,KAAKC,KAFT,CADe,CAIf;;AACA;AAEM,MAAA,KAAK,EAAG,QAAOH,IAAK,UAF1B;AAGM,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAG,QAAO,OAAOF,YAAY,CAACG,MAAb,GAAsB,CAA7B,CAAgC,OAAMR,oBAAqB;AAA5E,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMH;;AAEDU,EAAAA,kBAAkB,GAAG,CAEpB;;AAEDC,EAAAA,MAAM,GAAG;AAAA;;AACL,UAAM;AACFN,MAAAA,YADE;AAEFO,MAAAA;AAFE,QAGF,KAAKN,KAHT;AAKA;AAGQ,MAAA,KAAK,EAAC,aAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMc,KAAKJ,cAAL,CAAoBJ,IAApB,CANd,EAOcO,YAAY,CAACQ,GAAb,CAAiB,YAAM;AACrB,MAAA,KAAI,CAACJ,gBAAL;;AACA,MAAA,KAAI,CAACC,kBAAL;AACH,KAHC,CAPd,EAWc,KAAKR,cAAL,CAAoBH,KAApB,CAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBH;;AA5D0C,CAA/C,SACWe,SADX,GACuB;AACfT,EAAAA,YAAY,EAAET,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAACoB,MAA5B,CADC;AAEfJ,EAAAA,SAAS,EAAEhB,SAAS,CAACqB;AAFN,CADvB;AA+DA,eAAeC,WAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport './ProgressBar.style';\n\nimport {\n    LEFT,\n    RIGHT\n} from './ProgressBar.config'\n\nconst PROGRESS_POINT_WIDTH = 35; // px\nconst PROGRESS_POINT_MARGIN = 5; // px\n\n/** @namespace Component/ProgressBar/Component */\nexport class ProgressBar extends PureComponent {\n    static propTypes = {\n        progressList: PropTypes.arrayOf(PropTypes.string),\n        currentID: PropTypes.number\n    };\n\n    renderEdgeLine(side, filled=false) {\n        const {\n            progressList\n        } = this.props;\n        // currentID === progressList.length - 1\n        return (\n            <div\n              block={`Line ${side}EdgeLine`}\n              style={{ width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px` }}\n            />\n        );\n    }\n\n    renderCheckpoint() {\n        const {\n            progressList\n        } = this.props;\n        // currentID === progressList.length - 1\n        return (\n            <div\n              block={`Line ${side}EdgeLine`}\n              style={{ width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px` }}\n            />\n        );\n    }\n\n    renderProgressLine() {\n\n    }\n\n    render() {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n\n        return (\n\n            <div\n                block=\"ProgressBar\"\n            >\n                <div>\n                    { this.renderEdgeLine(LEFT) }\n                    { progressList.map(() => {\n                        this.renderCheckpoint();\n                        this.renderProgressLine();\n                    }) }\n                    { this.renderEdgeLine(RIGHT) }\n                </div>\n                <div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}