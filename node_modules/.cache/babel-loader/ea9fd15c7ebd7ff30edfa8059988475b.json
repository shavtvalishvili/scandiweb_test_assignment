{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js\";\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport \"./ProgressBar.style\";\nimport { LEFT, RIGHT } from \"./ProgressBar.config\";\nconst PROGRESS_POINT_WIDTH = 60; // px\n\n/** #namespace Component/ProgressBar/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProgressBar = Mosaic.middleware((_temp = _class = class ProgressBar_ extends Mosaic.Extensible(PureComponent) {\n  renderEdgeLine(side, filled = false) {\n    const {\n      progressList\n    } = this.props; // currentID === progressList.length - 1\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line ${side}EdgeLine`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH / 2}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderCheckpoint(index) {\n    const {\n      currentID\n    } = this.props; // currentID >== index\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Checkpoint`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, index + 1);\n  }\n\n  renderProgressLine(startCheckpointIndex) {\n    const {\n      progressList,\n      currentID\n    } = this.props; // currentID > startCheckpointIndex\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    var _this = this;\n\n    const {\n      progressList,\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProgressBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, this.renderEdgeLine(LEFT), progressList.map(function (_, index) {\n      _this.renderCheckpoint(index);\n\n      _this.renderProgressLine(index);\n    }), this.renderEdgeLine(RIGHT)), /*#__PURE__*/_checkBEM(React, \"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  progressList: PropTypes.arrayOf(PropTypes.string),\n  currentID: PropTypes.number\n}, _temp), \"Component/ProgressBar/Component\");\nexport default ProgressBar;","map":{"version":3,"sources":["/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js"],"names":["PropTypes","PureComponent","LEFT","RIGHT","PROGRESS_POINT_WIDTH","renderEdgeLine","side","filled","progressList","props","width","length","renderCheckpoint","index","currentID","renderProgressLine","startCheckpointIndex","render","map","_","propTypes","arrayOf","string","number","ProgressBar"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA;AAEA,SACIC,IADJ,EAEIC,KAFJ;AAKA,MAAMC,oBAAoB,GAAG,EAA7B,C,CAAiC;;AAEjC;;;;AACA,4GAAiCH,aAAjC,EAA+C;AAM3CI,EAAAA,cAAc,CAACC,IAAD,EAAOC,MAAM,GAAC,KAAd,EAAqB;AAC/B,UAAM;AACFC,MAAAA;AADE,QAEF,KAAKC,KAFT,CAD+B,CAI/B;;AACA;AAEM,MAAA,KAAK,EAAG,QAAOH,IAAK,UAF1B;AAGM,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAG,QAAO,OAAOF,YAAY,CAACG,MAAb,GAAsB,CAA7B,CAAgC,OAAMP,oBAAoB,GAAG,CAAE;AAAhF,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMH;;AAEDQ,EAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpB,UAAM;AACFC,MAAAA;AADE,QAEF,KAAKL,KAFT,CADoB,CAIpB;;AACA;AAEM,MAAA,KAAK,EAAG,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAISI,KAAK,GAAG,CAJjB;AAOH;;AAEDE,EAAAA,kBAAkB,CAACC,oBAAD,EAAuB;AACrC,UAAM;AACFR,MAAAA,YADE;AAEFM,MAAAA;AAFE,QAGF,KAAKL,KAHT,CADqC,CAKrC;;AACA;AAEM,MAAA,KAAK,EAAG,MAFd;AAGM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAG,QAAO,OAAOF,YAAY,CAACG,MAAb,GAAsB,CAA7B,CAAgC,OAAMP,oBAAqB;AAA5E,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMH;;AAEDa,EAAAA,MAAM,GAAG;AAAA;;AACL,UAAM;AACFT,MAAAA,YADE;AAEFM,MAAAA;AAFE,QAGF,KAAKL,KAHT;AAKA;AAGQ,MAAA,KAAK,EAAC,aAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKa,MAAA,KAAK,EAAC,UALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMc,KAAKJ,cAAL,CAAoBH,IAApB,CANd,EAOcM,YAAY,CAACU,GAAb,CAAiB,UAACC,CAAD,EAAIN,KAAJ,EAAc;AAC7B,MAAA,KAAI,CAACD,gBAAL,CAAsBC,KAAtB;;AACA,MAAA,KAAI,CAACE,kBAAL,CAAwBF,KAAxB;AACH,KAHC,CAPd,EAWc,KAAKR,cAAL,CAAoBF,KAApB,CAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBH;;AAvE0C,CAA/C,SACWiB,SADX,GACuB;AACfZ,EAAAA,YAAY,EAAER,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,MAA5B,CADC;AAEfR,EAAAA,SAAS,EAAEd,SAAS,CAACuB;AAFN,CADvB;AA0EA,eAAeC,WAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport './ProgressBar.style';\n\nimport {\n    LEFT,\n    RIGHT\n} from './ProgressBar.config'\n\nconst PROGRESS_POINT_WIDTH = 60; // px\n\n/** @namespace Component/ProgressBar/Component */\nexport class ProgressBar extends PureComponent {\n    static propTypes = {\n        progressList: PropTypes.arrayOf(PropTypes.string),\n        currentID: PropTypes.number\n    };\n\n    renderEdgeLine(side, filled=false) {\n        const {\n            progressList\n        } = this.props;\n        // currentID === progressList.length - 1\n        return (\n            <div\n              block={`Line ${side}EdgeLine`}\n              style={{ width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH / 2}px` }}\n            />\n        );\n    }\n\n    renderCheckpoint(index) {\n        const {\n            currentID\n        } = this.props;\n        // currentID >== index\n        return (\n            <div\n              block={`Checkpoint`}\n            >\n                {index + 1}\n            </div>\n        );\n    }\n\n    renderProgressLine(startCheckpointIndex) {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n        // currentID > startCheckpointIndex\n        return (\n            <div\n              block={`Line`}\n              style={{ width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px` }}\n            />\n        );\n    }\n\n    render() {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n\n        return (\n\n            <div\n                block=\"ProgressBar\"\n            >\n                <div block=\"Progress\">\n                    { this.renderEdgeLine(LEFT) }\n                    { progressList.map((_, index) => {\n                        this.renderCheckpoint(index);\n                        this.renderProgressLine(index);\n                    }) }\n                    { this.renderEdgeLine(RIGHT) }\n                </div>\n                <div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}