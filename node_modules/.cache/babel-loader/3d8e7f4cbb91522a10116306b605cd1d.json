{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js\";\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport \"./ProgressBar.style\";\nimport { LEFT, RIGHT } from \"./ProgressBar.config\";\nconst PROGRESS_POINT_WIDTH = 50; // px\n\n/** #namespace Component/ProgressBar/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProgressBar = Mosaic.middleware((_temp = _class = class ProgressBar_ extends Mosaic.Extensible(PureComponent) {\n  renderEdgeLine(side) {\n    const {\n      progressList\n    } = this.props; // currentID === progressList.length - 1\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line ${side}EdgeLine ${(side === LEFT || currentID === progressList.length - 1) && 'Filled'}`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH / 2}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderCheckpoint(index) {\n    const {\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Checkpoint ${currentID >= index && 'Filled'}`,\n      style: currentID >= index ? {\n        color: \"white\"\n      } : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, index + 1);\n  }\n\n  renderProgressLine(startCheckpointIndex) {\n    const {\n      progressList,\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Line ${currentID > startCheckpointIndex && 'Filled'}`,\n      style: {\n        width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderLabel(index) {\n    const {\n      progressList,\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: `Label`,\n      style: index === currentID ? {\n        width: `calc(${100 / (progressList.length + 1)}%`,\n        color: \"black\"\n      } : {\n        width: `calc(${100 / (progressList.length + 1)}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, progressList[index]);\n  }\n\n  render() {\n    var _this = this;\n\n    const {\n      progressList,\n      currentID\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProgressBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, this.renderEdgeLine(LEFT), progressList.map(function (_, index) {\n      return [_this.renderCheckpoint(index), index !== progressList.length - 1 ? _this.renderProgressLine(index) : /*#__PURE__*/_checkBEM(React, React.Fragment, null)];\n    }).flat(), this.renderEdgeLine(RIGHT)), /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Labels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, progressList.map(function (_, index) {\n      return _this.renderLabel(index);\n    })));\n  }\n\n}, _class.propTypes = {\n  progressList: PropTypes.arrayOf(PropTypes.string),\n  currentID: PropTypes.number\n}, _temp), \"Component/ProgressBar/Component\");\nexport default ProgressBar;","map":{"version":3,"sources":["/home/grg/scandiweb_test_assignment/src/component/ProgressBar/ProgressBar.component.js"],"names":["PropTypes","PureComponent","LEFT","RIGHT","PROGRESS_POINT_WIDTH","renderEdgeLine","side","progressList","props","currentID","length","width","renderCheckpoint","index","color","renderProgressLine","startCheckpointIndex","renderLabel","render","map","_","flat","propTypes","arrayOf","string","number","ProgressBar"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport './ProgressBar.style';\n\nimport {\n    LEFT,\n    RIGHT\n} from './ProgressBar.config'\n\nconst PROGRESS_POINT_WIDTH = 50; // px\n\n/** @namespace Component/ProgressBar/Component */\nexport class ProgressBar extends PureComponent {\n    static propTypes = {\n        progressList: PropTypes.arrayOf(PropTypes.string),\n        currentID: PropTypes.number\n    };\n\n    renderEdgeLine(side) {\n        const {\n            progressList\n        } = this.props;\n        // currentID === progressList.length - 1\n        return (\n            <div\n              block={`Line ${side}EdgeLine ${(side === LEFT || currentID === progressList.length - 1) && 'Filled'}`}\n              style={{ width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH / 2}px` }}\n            />\n        );\n    }\n\n    renderCheckpoint(index) {\n        const {\n            currentID\n        } = this.props;\n\n        return (\n            <div\n              block={`Checkpoint ${currentID >= index && 'Filled'}`}\n              style={currentID >= index ? { color: \"white\" } : {}}\n            >\n                {index + 1}\n            </div>\n        );\n    }\n\n    renderProgressLine(startCheckpointIndex) {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n\n        return (\n            <div\n                block={`Line ${currentID > startCheckpointIndex && 'Filled'}`}\n                style={{width: `calc(${100 / (progressList.length + 1)}% - ${PROGRESS_POINT_WIDTH}px` }}\n            />\n        );\n    }\n\n    renderLabel(index) {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n        return (\n            <div\n                block={`Label`}\n                style={index === currentID ? {\n                    width: `calc(${100 / (progressList.length + 1)}%`,\n                    color: \"black\"\n                } :\n                {\n                    width: `calc(${100 / (progressList.length + 1)}%` \n                }}\n            >\n                {progressList[index]}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            progressList,\n            currentID\n        } = this.props;\n\n        return (\n\n            <div\n                block=\"ProgressBar\"\n            >\n                <div block=\"Progress\">\n                    { this.renderEdgeLine(LEFT) }\n                    { progressList.map((_, index) => {\n                        return [\n                            this.renderCheckpoint(index),\n                            index !== progressList.length - 1 ? this.renderProgressLine(index) : <></>\n                        ];\n                    }).flat() }\n                    { this.renderEdgeLine(RIGHT) }\n                </div>\n                <div block=\"Labels\">\n                    { progressList.map((_, index) => {\n                        return this.renderLabel(index);\n                    }) }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}